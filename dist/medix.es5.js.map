{"version":3,"file":"medix.es5.js","sources":["../src/medix.ts"],"sourcesContent":["export interface IHandler {\n  handle(command: IConstructable): IConstructable\n}\n\nexport interface IRegisterHandler {\n  commandConstructor: Function\n  responseConstructor?: Function\n  handler: IHandler\n}\n\nexport interface IMediator {\n  register(data: IRegisterHandler): void\n  send<T>(t: IConstructable, r: INewInstance<T>): T\n  send(t: IConstructable): void\n}\n\nexport interface IConstructable {\n  constructor: Function\n}\n\nexport interface INewInstance<T> extends IConstructable {\n  new(): T\n}\n\nexport interface IMediatorQuery<T> {\n  getResponseType(): INewInstance<T>\n}\n\nexport class MediatorQuery<T> implements IMediatorQuery<T> {\n  private responseType: INewInstance<T>\n  constructor(responseType: INewInstance<T>) {\n    this.responseType = responseType\n  }\n  public getResponseType() {\n    return this.responseType\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Mediator implements IMediator {\n  private registry: Map<Function, Map<Function, IHandler>> = new Map()\n  public register(data: IRegisterHandler) {\n    const responseMap = this.registry.get(data.commandConstructor)\n    if (!responseMap) {\n      const newResponseMap = new Map()\n      newResponseMap.set(\n        data.responseConstructor || data.commandConstructor,\n        data.handler\n      )\n      this.registry.set(data.commandConstructor, newResponseMap)\n      return\n    }\n    responseMap.set(\n      data.responseConstructor || data.commandConstructor,\n      data.handler\n    )\n    return\n  }\n\n  public send<T>(command: IMediatorQuery<T>): T\n  public send<T>(command: IConstructable, responseType: INewInstance<T>): T\n  public send(command: IConstructable): void\n  public send<T>(\n    command: IConstructable,\n    responseType?: INewInstance<T>\n  ): T | void {\n    const noHandler = (type: string = 'handler') => { throw new Error(`No handler exists for this ${type} type`) }\n    const responseMap = this.registry.get(command.constructor)\n    if (!responseMap) {\n      noHandler('command')\n      return\n    }\n    if (!responseType && (command as IMediatorQuery<T>).getResponseType) {\n      const handler = responseMap.get((command as IMediatorQuery<T>).getResponseType())\n      if (handler) {\n        return handler.handle(command) as T\n      }\n      noHandler()\n    }\n    if (!responseType) {\n      const handler = responseMap.get(command.constructor)\n      if (handler) {\n        handler.handle(command)\n        return\n      }\n      noHandler()\n    }\n    const responseHandler = responseMap.get(responseType as INewInstance<T>)\n    if (responseHandler) {\n      return responseHandler.handle(command) as T\n    }\n    noHandler()\n  }\n}\n"],"names":[],"mappings":";IA8BE,YAAY,YAA6B;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;KACjC;IACM,eAAe;QACpB,OAAO,IAAI,CAAC,YAAY,CAAA;KACzB;CACF;;AAGD;IAAA;QACU,aAAQ,GAA2C,IAAI,GAAG,EAAE,CAAA;KAqDrE;IApDQ,QAAQ,CAAC,IAAsB;QACpC,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QAC9D,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAA;YAChC,cAAc,CAAC,GAAG,CAChB,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,kBAAkB,EACnD,IAAI,CAAC,OAAO,CACb,CAAA;YACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAA;YAC1D,OAAM;SACP;QACD,WAAW,CAAC,GAAG,CACb,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,kBAAkB,EACnD,IAAI,CAAC,OAAO,CACb,CAAA;QACD,OAAM;KACP;IAKM,IAAI,CACT,OAAuB,EACvB,YAA8B;QAE9B,MAAM,SAAS,GAAG,CAAC,OAAe,SAAS,OAAO,MAAM,IAAI,KAAK,CAAC,8BAA8B,IAAI,OAAO,CAAC,CAAA,EAAE,CAAA;QAC9G,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QAC1D,IAAI,CAAC,WAAW,EAAE;YAChB,SAAS,CAAC,SAAS,CAAC,CAAA;YACpB,OAAM;SACP;QACD,IAAI,CAAC,YAAY,IAAK,OAA6B,CAAC,eAAe,EAAE;YACnE,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAE,OAA6B,CAAC,eAAe,EAAE,CAAC,CAAA;YACjF,IAAI,OAAO,EAAE;gBACX,OAAO,OAAO,CAAC,MAAM,CAAC,OAAO,CAAM,CAAA;aACpC;YACD,SAAS,EAAE,CAAA;SACZ;QACD,IAAI,CAAC,YAAY,EAAE;YACjB,MAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACpD,IAAI,OAAO,EAAE;gBACX,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;gBACvB,OAAM;aACP;YACD,SAAS,EAAE,CAAA;SACZ;QACD,MAAM,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,YAA+B,CAAC,CAAA;QACxE,IAAI,eAAe,EAAE;YACnB,OAAO,eAAe,CAAC,MAAM,CAAC,OAAO,CAAM,CAAA;SAC5C;QACD,SAAS,EAAE,CAAA;KACZ;CACF;;;;"}