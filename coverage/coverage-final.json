{"/Users/cristianberrios/medix/src/medix.ts": {"path":"/Users/cristianberrios/medix/src/medix.ts","statementMap":{"0":{"start":{"line":1,"column":21},"end":{"line":9,"column":3}},"1":{"start":{"line":3,"column":8},"end":{"line":3,"column":41}},"2":{"start":{"line":5,"column":4},"end":{"line":7,"column":6}},"3":{"start":{"line":6,"column":8},"end":{"line":6,"column":33}},"4":{"start":{"line":8,"column":4},"end":{"line":8,"column":25}},"5":{"start":{"line":12,"column":16},"end":{"line":59,"column":3}},"6":{"start":{"line":14,"column":8},"end":{"line":14,"column":34}},"7":{"start":{"line":16,"column":4},"end":{"line":26,"column":6}},"8":{"start":{"line":17,"column":26},"end":{"line":17,"column":68}},"9":{"start":{"line":18,"column":8},"end":{"line":23,"column":9}},"10":{"start":{"line":19,"column":33},"end":{"line":19,"column":42}},"11":{"start":{"line":20,"column":12},"end":{"line":20,"column":98}},"12":{"start":{"line":21,"column":12},"end":{"line":21,"column":71}},"13":{"start":{"line":22,"column":12},"end":{"line":22,"column":19}},"14":{"start":{"line":24,"column":8},"end":{"line":24,"column":91}},"15":{"start":{"line":25,"column":8},"end":{"line":25,"column":15}},"16":{"start":{"line":27,"column":4},"end":{"line":57,"column":6}},"17":{"start":{"line":28,"column":24},"end":{"line":31,"column":9}},"18":{"start":{"line":29,"column":12},"end":{"line":29,"column":54}},"19":{"start":{"line":29,"column":35},"end":{"line":29,"column":52}},"20":{"start":{"line":30,"column":12},"end":{"line":30,"column":76}},"21":{"start":{"line":32,"column":26},"end":{"line":32,"column":64}},"22":{"start":{"line":33,"column":8},"end":{"line":36,"column":9}},"23":{"start":{"line":34,"column":12},"end":{"line":34,"column":33}},"24":{"start":{"line":35,"column":12},"end":{"line":35,"column":19}},"25":{"start":{"line":37,"column":8},"end":{"line":43,"column":9}},"26":{"start":{"line":38,"column":26},"end":{"line":38,"column":68}},"27":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"28":{"start":{"line":40,"column":16},"end":{"line":40,"column":47}},"29":{"start":{"line":42,"column":12},"end":{"line":42,"column":24}},"30":{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},"31":{"start":{"line":45,"column":26},"end":{"line":45,"column":62}},"32":{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},"33":{"start":{"line":47,"column":16},"end":{"line":47,"column":40}},"34":{"start":{"line":48,"column":16},"end":{"line":48,"column":23}},"35":{"start":{"line":50,"column":12},"end":{"line":50,"column":24}},"36":{"start":{"line":52,"column":30},"end":{"line":52,"column":59}},"37":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"38":{"start":{"line":54,"column":12},"end":{"line":54,"column":51}},"39":{"start":{"line":56,"column":8},"end":{"line":56,"column":20}},"40":{"start":{"line":58,"column":4},"end":{"line":58,"column":20}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":1,"column":21},"end":{"line":1,"column":22}},"loc":{"start":{"line":1,"column":33},"end":{"line":9,"column":1}},"line":1},"1":{"name":"MediatorQuery","decl":{"start":{"line":2,"column":13},"end":{"line":2,"column":26}},"loc":{"start":{"line":2,"column":41},"end":{"line":4,"column":5}},"line":2},"2":{"name":"(anonymous_2)","decl":{"start":{"line":5,"column":46},"end":{"line":5,"column":47}},"loc":{"start":{"line":5,"column":58},"end":{"line":7,"column":5}},"line":5},"3":{"name":"(anonymous_3)","decl":{"start":{"line":12,"column":16},"end":{"line":12,"column":17}},"loc":{"start":{"line":12,"column":28},"end":{"line":59,"column":1}},"line":12},"4":{"name":"Mediator","decl":{"start":{"line":13,"column":13},"end":{"line":13,"column":21}},"loc":{"start":{"line":13,"column":24},"end":{"line":15,"column":5}},"line":13},"5":{"name":"(anonymous_5)","decl":{"start":{"line":16,"column":34},"end":{"line":16,"column":35}},"loc":{"start":{"line":16,"column":50},"end":{"line":26,"column":5}},"line":16},"6":{"name":"(anonymous_6)","decl":{"start":{"line":27,"column":30},"end":{"line":27,"column":31}},"loc":{"start":{"line":27,"column":63},"end":{"line":57,"column":5}},"line":27},"7":{"name":"(anonymous_7)","decl":{"start":{"line":28,"column":24},"end":{"line":28,"column":25}},"loc":{"start":{"line":28,"column":40},"end":{"line":31,"column":9}},"line":28}},"branchMap":{"0":{"loc":{"start":{"line":18,"column":8},"end":{"line":23,"column":9}},"type":"if","locations":[{"start":{"line":18,"column":8},"end":{"line":23,"column":9}},{"start":{"line":18,"column":8},"end":{"line":23,"column":9}}],"line":18},"1":{"loc":{"start":{"line":20,"column":31},"end":{"line":20,"column":82}},"type":"binary-expr","locations":[{"start":{"line":20,"column":31},"end":{"line":20,"column":55}},{"start":{"line":20,"column":59},"end":{"line":20,"column":82}}],"line":20},"2":{"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":75}},"type":"binary-expr","locations":[{"start":{"line":24,"column":24},"end":{"line":24,"column":48}},{"start":{"line":24,"column":52},"end":{"line":24,"column":75}}],"line":24},"3":{"loc":{"start":{"line":29,"column":12},"end":{"line":29,"column":54}},"type":"if","locations":[{"start":{"line":29,"column":12},"end":{"line":29,"column":54}},{"start":{"line":29,"column":12},"end":{"line":29,"column":54}}],"line":29},"4":{"loc":{"start":{"line":33,"column":8},"end":{"line":36,"column":9}},"type":"if","locations":[{"start":{"line":33,"column":8},"end":{"line":36,"column":9}},{"start":{"line":33,"column":8},"end":{"line":36,"column":9}}],"line":33},"5":{"loc":{"start":{"line":37,"column":8},"end":{"line":43,"column":9}},"type":"if","locations":[{"start":{"line":37,"column":8},"end":{"line":43,"column":9}},{"start":{"line":37,"column":8},"end":{"line":43,"column":9}}],"line":37},"6":{"loc":{"start":{"line":37,"column":12},"end":{"line":37,"column":52}},"type":"binary-expr","locations":[{"start":{"line":37,"column":12},"end":{"line":37,"column":25}},{"start":{"line":37,"column":29},"end":{"line":37,"column":52}}],"line":37},"7":{"loc":{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},"type":"if","locations":[{"start":{"line":39,"column":12},"end":{"line":41,"column":13}},{"start":{"line":39,"column":12},"end":{"line":41,"column":13}}],"line":39},"8":{"loc":{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},"type":"if","locations":[{"start":{"line":44,"column":8},"end":{"line":51,"column":9}},{"start":{"line":44,"column":8},"end":{"line":51,"column":9}}],"line":44},"9":{"loc":{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},"type":"if","locations":[{"start":{"line":46,"column":12},"end":{"line":49,"column":13}},{"start":{"line":46,"column":12},"end":{"line":49,"column":13}}],"line":46},"10":{"loc":{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},"type":"if","locations":[{"start":{"line":53,"column":8},"end":{"line":55,"column":9}},{"start":{"line":53,"column":8},"end":{"line":55,"column":9}}],"line":53}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":3,"7":1,"8":3,"9":3,"10":3,"11":3,"12":3,"13":3,"14":0,"15":0,"16":1,"17":3,"18":0,"19":0,"20":0,"21":3,"22":3,"23":0,"24":0,"25":3,"26":1,"27":1,"28":1,"29":0,"30":2,"31":0,"32":0,"33":0,"34":0,"35":0,"36":2,"37":2,"38":2,"39":0,"40":1},"f":{"0":1,"1":1,"2":1,"3":1,"4":3,"5":3,"6":3,"7":0},"b":{"0":[3,0],"1":[3,0],"2":[0,0],"3":[0,0],"4":[0,3],"5":[1,2],"6":[3,1],"7":[1,0],"8":[0,2],"9":[0,0],"10":[2,0]},"inputSourceMap":{"version":3,"file":"medix.js","sourceRoot":"","sources":["medix.ts"],"names":[],"mappings":"AA4BA;IAEE,uBAAY,YAA6B;QACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAA;IAClC,CAAC;IACM,uCAAe,GAAtB;QACE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAA;IAC1B,CAAC;IACH,oBAAC;AAAD,CAAC,AARD,IAQC;;AAED,gDAAgD;AAChD;IAAA;QACU,aAAQ,GAA2C,IAAI,GAAG,EAAE,CAAA;IAyDtE,CAAC;IAxDQ,2BAAQ,GAAf,UAAgB,IAAsB;QACpC,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAA;QAC9D,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,IAAM,cAAc,GAAG,IAAI,GAAG,EAAE,CAAA;YAChC,cAAc,CAAC,GAAG,CAChB,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,kBAAkB,EACnD,IAAI,CAAC,OAAO,CACb,CAAA;YACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,kBAAkB,EAAE,cAAc,CAAC,CAAA;YAC1D,MAAM,CAAA;QACR,CAAC;QACD,WAAW,CAAC,GAAG,CACb,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,kBAAkB,EACnD,IAAI,CAAC,OAAO,CACb,CAAA;QACD,MAAM,CAAA;IACR,CAAC;IAKM,uBAAI,GAAX,UACE,OAAuB,EACvB,YAA8B;QAE9B,IAAM,SAAS,GAAG,UAAC,IAAwB;YAAxB,qBAAA,EAAA,gBAAwB;YACzC,MAAM,IAAI,KAAK,CAAC,gCAA8B,IAAI,UAAO,CAAC,CAAA;QAC5D,CAAC,CAAA;QACD,IAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;QAC1D,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YACjB,SAAS,CAAC,SAAS,CAAC,CAAA;YACpB,MAAM,CAAA;QACR,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,YAAY,IAAK,OAA6B,CAAC,eAAe,CAAC,CAAC,CAAC;YACpE,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAC5B,OAA6B,CAAC,eAAe,EAAE,CACjD,CAAA;YACD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAM,CAAA;YACrC,CAAC;YACD,SAAS,EAAE,CAAA;QACb,CAAC;QACD,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAClB,IAAM,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,CAAA;YACpD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAA;gBACvB,MAAM,CAAA;YACR,CAAC;YACD,SAAS,EAAE,CAAA;QACb,CAAC;QACD,IAAM,eAAe,GAAG,WAAW,CAAC,GAAG,CAAC,YAA+B,CAAC,CAAA;QACxE,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;YACpB,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,OAAO,CAAM,CAAA;QAC7C,CAAC;QACD,SAAS,EAAE,CAAA;IACb,CAAC;IACH,eAAC;AAAD,CAAC,AA1DD,IA0DC","sourcesContent":["export interface IHandler {\n  handle(command: IConstructable): IConstructable\n}\n\nexport interface IRegisterHandler {\n  commandConstructor: Function\n  responseConstructor?: Function\n  handler: IHandler\n}\n\nexport interface IMediator {\n  register(data: IRegisterHandler): void\n  send<T>(t: IConstructable, r: INewInstance<T>): T\n  send(t: IConstructable): void\n}\n\nexport interface IConstructable {\n  constructor: Function\n}\n\nexport interface INewInstance<T> extends IConstructable {\n  new (): T\n}\n\nexport interface IMediatorQuery<T> {\n  getResponseType(): INewInstance<T>\n}\n\nexport class MediatorQuery<T> implements IMediatorQuery<T> {\n  private responseType: INewInstance<T>\n  constructor(responseType: INewInstance<T>) {\n    this.responseType = responseType\n  }\n  public getResponseType() {\n    return this.responseType\n  }\n}\n\n// tslint:disable-next-line:max-classes-per-file\nexport class Mediator implements IMediator {\n  private registry: Map<Function, Map<Function, IHandler>> = new Map()\n  public register(data: IRegisterHandler) {\n    const responseMap = this.registry.get(data.commandConstructor)\n    if (!responseMap) {\n      const newResponseMap = new Map()\n      newResponseMap.set(\n        data.responseConstructor || data.commandConstructor,\n        data.handler\n      )\n      this.registry.set(data.commandConstructor, newResponseMap)\n      return\n    }\n    responseMap.set(\n      data.responseConstructor || data.commandConstructor,\n      data.handler\n    )\n    return\n  }\n\n  public send<T>(command: IMediatorQuery<T>): T\n  public send<T>(command: IConstructable, responseType: INewInstance<T>): T\n  public send(command: IConstructable): void\n  public send<T>(\n    command: IConstructable,\n    responseType?: INewInstance<T>\n  ): T | void {\n    const noHandler = (type: string = \"handler\") => {\n      throw new Error(`No handler exists for this ${type} type`)\n    }\n    const responseMap = this.registry.get(command.constructor)\n    if (!responseMap) {\n      noHandler(\"command\")\n      return\n    }\n    if (!responseType && (command as IMediatorQuery<T>).getResponseType) {\n      const handler = responseMap.get(\n        (command as IMediatorQuery<T>).getResponseType()\n      )\n      if (handler) {\n        return handler.handle(command) as T\n      }\n      noHandler()\n    }\n    if (!responseType) {\n      const handler = responseMap.get(command.constructor)\n      if (handler) {\n        handler.handle(command)\n        return\n      }\n      noHandler()\n    }\n    const responseHandler = responseMap.get(responseType as INewInstance<T>)\n    if (responseHandler) {\n      return responseHandler.handle(command) as T\n    }\n    noHandler()\n  }\n}\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"ef4dc56577701a7a14b6098f21ddf20a13030ad6"}
}
